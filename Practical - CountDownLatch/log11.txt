ID: 1
Execution stack: [(Ref(int) v1;(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))]
Symbol table: {}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))), Ref(int) v1]
Symbol table: {}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))), Ref(int) v1]
Symbol table: {}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))]
Symbol table: {v1=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))]
Symbol table: {v1=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))), Ref(int) v2]
Symbol table: {v1=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))), Ref(int) v2]
Symbol table: {v1=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))]
Symbol table: {v1=(0, int), v2=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))]
Symbol table: {v1=(0, int), v2=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))), Ref(int) v3]
Symbol table: {v1=(0, int), v2=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))), Ref(int) v3]
Symbol table: {v1=(0, int), v2=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))]
Symbol table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))]
Symbol table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))), int cnt]
Symbol table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))), int cnt]
Symbol table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))]
Symbol table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))]
Symbol table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))), New(v1, 2)]
Symbol table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))), New(v1, 2)]
Symbol table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{}
Latch table:{}

ID: 1
Execution stack: [(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))]
Symbol table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2}
Latch table:{}

ID: 1
Execution stack: [(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))]
Symbol table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2}
Latch table:{}

ID: 1
Execution stack: [(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))), New(v2, 3)]
Symbol table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2}
Latch table:{}

ID: 1
Execution stack: [(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))), New(v2, 3)]
Symbol table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2}
Latch table:{}

ID: 1
Execution stack: [(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3}
Latch table:{}

ID: 1
Execution stack: [(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3}
Latch table:{}

ID: 1
Execution stack: [(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))), New(v3, 4)]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3}
Latch table:{}

ID: 1
Execution stack: [(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))), New(v3, 4)]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3}
Latch table:{}

ID: 1
Execution stack: [(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{}

ID: 1
Execution stack: [(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{}

ID: 1
Execution stack: [(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))), newLatch(cnt, ReadHeap(v2))]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{}

ID: 1
Execution stack: [(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))), newLatch(cnt, ReadHeap(v2))]
Symbol table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{}

ID: 1
Execution stack: [(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(await(cnt);(print(100);(countDown(cnt);print(100)))), Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(await(cnt);(print(100);(countDown(cnt);print(100)))), Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(await(cnt);(print(100);(countDown(cnt);print(100))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(await(cnt);(print(100);(countDown(cnt);print(100))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))), WriteHeap(v1, ReadHeap(v1) * 10)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))), WriteHeap(v1, ReadHeap(v1) * 10)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=2, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))), print(ReadHeap(v1))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))), print(ReadHeap(v1))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: []
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))), countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 2
Execution stack: [Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))), countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=3}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 2
Execution stack: [Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))), print(2)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 2
Execution stack: [Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))), print(2)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 2
Execution stack: [Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 2
Execution stack: [Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 2
Execution stack: []
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))), WriteHeap(v2, ReadHeap(v2) * 10)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))), WriteHeap(v2, ReadHeap(v2) * 10)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=3, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))), print(ReadHeap(v2))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))), print(ReadHeap(v2))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))), countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 3
Execution stack: [Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))), countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=2}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 3
Execution stack: [Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))), print(3)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 3
Execution stack: [Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))), print(3)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 3
Execution stack: [Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 3
Execution stack: [Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 3
Execution stack: []
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 4
Execution stack: [(WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 4
Execution stack: [(WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 4
Execution stack: [(print(ReadHeap(v3));countDown(cnt)), WriteHeap(v3, ReadHeap(v3) * 10)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 4
Execution stack: [(print(ReadHeap(v3));countDown(cnt)), WriteHeap(v3, ReadHeap(v3) * 10)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=4}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 4
Execution stack: [(print(ReadHeap(v3));countDown(cnt))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 4
Execution stack: [(print(ReadHeap(v3));countDown(cnt))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 4
Execution stack: [countDown(cnt), print(ReadHeap(v3))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 4
Execution stack: [countDown(cnt), print(ReadHeap(v3))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 4
Execution stack: [countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 4
Execution stack: [countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=1}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 4
Execution stack: [print(4)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100))), await(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 4
Execution stack: [print(4)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100)))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 4
Execution stack: []
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(print(100);(countDown(cnt);print(100)))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(countDown(cnt);print(100)), print(100)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(countDown(cnt);print(100)), print(100)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(countDown(cnt);print(100))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [(countDown(cnt);print(100))]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [print(100), countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [print(100), countDown(cnt)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [print(100), print(1)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [print(100), print(1)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [print(100)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100, 1]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: [print(100)]
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100, 1]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

ID: 1
Execution stack: []
Symbol table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output list: [20, 2, 30, 3, 40, 4, 100, 1, 100]
File table:{}
Heap memory:{1=20, 2=30, 3=40}
Latch table:{1=0}

